// Generated by CoffeeScript 1.3.3
(function() {
  var Browser, app, express, extract, info, instances, port, uuid, _;

  express = require('express');

  Browser = require('zombie');

  uuid = require('node-uuid');

  _ = require('underscore');

  info = require('./package');

  app = express();

  module.exports = app;

  app.use(express.bodyParser());

  app.configure(function() {
    app.use(express.bodyParser());
    return app.use(app.router);
  });

  app.all('/*', function(req, res, next) {
    res.header("Access-Control-Allow-Origin", "" + req.headers.origin);
    res.header("Access-Control-Allow-Credentials", true);
    res.header("Access-Control-Allow-Headers", "Content-Type, *");
    res.header('Access-Control-Allow-Methods', 'POST, GET, PUT, DELETE, OPTIONS');
    return next();
  });

  instances = {};

  port = 9000;

  extract = function(instance) {
    return {
      guid: instance.guid,
      url: instance.window.location.href
    };
  };

  app.post('/horde', function(req, res) {
    var browser, guid;
    if (!req.body.url) {
      res.json(412, {
        'message': 'url missing'
      });
      return;
    }
    guid = uuid.v4();
    browser = new Browser;
    browser.guid = guid;
    instances[guid] = browser;
    return browser.visit(req.body.url, function(error, browser, statusCode, errors) {
      var i;
      return res.json(201, {
        'created': extract(browser),
        'horde': (function() {
          var _i, _len, _ref, _results;
          _ref = _.toArray(instances);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            i = _ref[_i];
            _results.push(extract(i));
          }
          return _results;
        })()
      });
    });
  });

  app.get('/horde/alive', function(req, res) {
    return res.json({
      tot: Object.keys(instances).length
    });
  });

  app.get('/horde', function(req, res) {
    var i;
    return res.json((function() {
      var _i, _len, _ref, _results;
      _ref = _.toArray(instances);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        i = _ref[_i];
        _results.push(extract(i));
      }
      return _results;
    })());
  });

  app.get('/horde/:guid', function(req, res) {
    var instance;
    instance = instances[req.params.guid];
    if (!instance) {
      return res.json(404, {
        result: 'error',
        message: "instance " + req.params.guid + " doesn't exist"
      });
    } else {
      return res.json(200, {
        url: instance.location.href
      });
    }
  });

  app["delete"]('/horde', function(req, res) {
    var key, _i, _len, _ref;
    _ref = Object.keys(instances);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      key = _ref[_i];
      instances[key].close();
      delete instances[key];
    }
    return res.json(200, null);
  });

  app.get('/', function(req, res) {
    return res.json(200, {
      version: info.version
    });
  });

  app.get('/spells/:site', function(req, res) {
    return require('fs').readdir("./spells/" + req.params.site, function(err, spells) {
      var s;
      return res.json(200, (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = spells.length; _i < _len; _i++) {
          s = spells[_i];
          _results.push({
            name: s
          });
        }
        return _results;
      })());
    });
  });

  app.put('/horde/:guid/spells/:spell', function(req, res) {
    var cb, guid, instance, spell, url;
    guid = req.params.guid;
    instance = instances[guid];
    url = instance.window.location.href.replace('http://', '');
    if (url.indexOf('/') !== -1) {
      url = url.substring(0, url.lastIndexOf('/'));
    }
    spell = require("./spells/" + url + "/" + req.params.spell);
    cb = function(res, guid) {
      return function(result, found, expected) {
        return res.json(200, {
          guid: guid,
          result: result,
          found: found,
          expected: expected
        });
      };
    };
    return spell(instance, cb(res, guid));
  });

  app.listen(3000, function() {
    return console.log('listening on 3000');
  });

}).call(this);
