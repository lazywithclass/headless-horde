// Generated by CoffeeScript 1.3.3
(function() {
  var Seq, app, request, should;

  request = require('supertest');

  Seq = require('seq');

  app = require('../server');

  should = require('should');

  describe('GET', function() {
    afterEach(function(done) {
      return request(app).del('/horde').end(done);
    });
    describe('/info', function() {
      return it('provides its version', function(done) {
        return request(app).get('/').end(function(err, res) {
          JSON.parse(res.text).version.should.equal(require('../package').version);
          return done();
        });
      });
    });
    describe('/horde', function() {
      it('returns an array of instances', function(done) {
        return Seq().seq_(function(next) {
          return request(app).post('/horde').send({
            url: 'http://localhost:8000'
          }).end(next);
        }).seq_(function(next) {
          return request(app).get('/horde').end(function(err, res) {
            var data;
            data = JSON.parse(res.text);
            data.should.be.an.instanceOf(Array);
            should.exist(data[0].guid);
            should.exist(data[0].url);
            return done();
          });
        });
      });
      it('returns 404 if client supplies a non existing guid', function(done) {
        return request(app).get('/horde/h725').expect(404, done);
      });
      return it('returns a given instance', function(done) {
        var guid, started;
        guid = '';
        started = new Date().getTime();
        return Seq().seq_(function(next) {
          return request(app).post('/horde').send({
            url: 'http://localhost:8000'
          }).end(function(err, res) {
            guid = JSON.parse(res.text).created.guid;
            return next();
          });
        }).seq_(function(next) {
          return request(app).get("/horde/" + guid).end(function(err, res) {
            JSON.parse(res.text).url.should.equal('http://localhost:8000/');
            return done();
          });
        });
      });
    });
    describe('/horde/alive', function() {
      return it('returns the number of alive members in the horde', function(done) {
        return Seq().seq_(function(next) {
          return request(app).post('/horde').send({
            url: 'http://localhost:8000'
          }).end(next);
        }).seq_(function(next) {
          return request(app).get('/horde/alive').end(function(err, res) {
            JSON.parse(res.text).tot.should.equal(1);
            return done();
          });
        });
      });
    });
    return describe('/spells/:site', function() {
      return it('returns the available spells for a site', function(done) {
        return request(app).get('/spells/localhost:8000').expect(200).end(function(err, res) {
          var spells;
          spells = JSON.parse(res.text);
          spells[0].should.have.property('name', 'title.js');
          return done();
        });
      });
    });
  });

}).call(this);
